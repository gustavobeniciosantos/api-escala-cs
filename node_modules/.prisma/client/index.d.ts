
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Manager
 * 
 */
export type Manager = $Result.DefaultSelection<Prisma.$ManagerPayload>
/**
 * Model Collaborator
 * 
 */
export type Collaborator = $Result.DefaultSelection<Prisma.$CollaboratorPayload>
/**
 * Model DayOff
 * 
 */
export type DayOff = $Result.DefaultSelection<Prisma.$DayOffPayload>
/**
 * Model LastDayOfLastMonth
 * 
 */
export type LastDayOfLastMonth = $Result.DefaultSelection<Prisma.$LastDayOfLastMonthPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Managers
 * const managers = await prisma.manager.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Managers
   * const managers = await prisma.manager.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.manager`: Exposes CRUD operations for the **Manager** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Managers
    * const managers = await prisma.manager.findMany()
    * ```
    */
  get manager(): Prisma.ManagerDelegate<ExtArgs>;

  /**
   * `prisma.collaborator`: Exposes CRUD operations for the **Collaborator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collaborators
    * const collaborators = await prisma.collaborator.findMany()
    * ```
    */
  get collaborator(): Prisma.CollaboratorDelegate<ExtArgs>;

  /**
   * `prisma.dayOff`: Exposes CRUD operations for the **DayOff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DayOffs
    * const dayOffs = await prisma.dayOff.findMany()
    * ```
    */
  get dayOff(): Prisma.DayOffDelegate<ExtArgs>;

  /**
   * `prisma.lastDayOfLastMonth`: Exposes CRUD operations for the **LastDayOfLastMonth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LastDayOfLastMonths
    * const lastDayOfLastMonths = await prisma.lastDayOfLastMonth.findMany()
    * ```
    */
  get lastDayOfLastMonth(): Prisma.LastDayOfLastMonthDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Manager: 'Manager',
    Collaborator: 'Collaborator',
    DayOff: 'DayOff',
    LastDayOfLastMonth: 'LastDayOfLastMonth'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'manager' | 'collaborator' | 'dayOff' | 'lastDayOfLastMonth'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Manager: {
        payload: Prisma.$ManagerPayload<ExtArgs>
        fields: Prisma.ManagerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManagerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManagerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          findFirst: {
            args: Prisma.ManagerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManagerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          findMany: {
            args: Prisma.ManagerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>[]
          }
          create: {
            args: Prisma.ManagerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          createMany: {
            args: Prisma.ManagerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ManagerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          update: {
            args: Prisma.ManagerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          deleteMany: {
            args: Prisma.ManagerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ManagerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ManagerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          aggregate: {
            args: Prisma.ManagerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateManager>
          }
          groupBy: {
            args: Prisma.ManagerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ManagerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManagerCountArgs<ExtArgs>,
            result: $Utils.Optional<ManagerCountAggregateOutputType> | number
          }
        }
      }
      Collaborator: {
        payload: Prisma.$CollaboratorPayload<ExtArgs>
        fields: Prisma.CollaboratorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaboratorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaboratorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          findFirst: {
            args: Prisma.CollaboratorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaboratorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          findMany: {
            args: Prisma.CollaboratorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>[]
          }
          create: {
            args: Prisma.CollaboratorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          createMany: {
            args: Prisma.CollaboratorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CollaboratorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          update: {
            args: Prisma.CollaboratorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          deleteMany: {
            args: Prisma.CollaboratorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CollaboratorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CollaboratorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollaboratorPayload>
          }
          aggregate: {
            args: Prisma.CollaboratorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCollaborator>
          }
          groupBy: {
            args: Prisma.CollaboratorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CollaboratorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaboratorCountArgs<ExtArgs>,
            result: $Utils.Optional<CollaboratorCountAggregateOutputType> | number
          }
        }
      }
      DayOff: {
        payload: Prisma.$DayOffPayload<ExtArgs>
        fields: Prisma.DayOffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DayOffFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DayOffFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          findFirst: {
            args: Prisma.DayOffFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DayOffFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          findMany: {
            args: Prisma.DayOffFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>[]
          }
          create: {
            args: Prisma.DayOffCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          createMany: {
            args: Prisma.DayOffCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DayOffDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          update: {
            args: Prisma.DayOffUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          deleteMany: {
            args: Prisma.DayOffDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DayOffUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DayOffUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DayOffPayload>
          }
          aggregate: {
            args: Prisma.DayOffAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDayOff>
          }
          groupBy: {
            args: Prisma.DayOffGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DayOffGroupByOutputType>[]
          }
          count: {
            args: Prisma.DayOffCountArgs<ExtArgs>,
            result: $Utils.Optional<DayOffCountAggregateOutputType> | number
          }
        }
      }
      LastDayOfLastMonth: {
        payload: Prisma.$LastDayOfLastMonthPayload<ExtArgs>
        fields: Prisma.LastDayOfLastMonthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LastDayOfLastMonthFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LastDayOfLastMonthFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          findFirst: {
            args: Prisma.LastDayOfLastMonthFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LastDayOfLastMonthFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          findMany: {
            args: Prisma.LastDayOfLastMonthFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>[]
          }
          create: {
            args: Prisma.LastDayOfLastMonthCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          createMany: {
            args: Prisma.LastDayOfLastMonthCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LastDayOfLastMonthDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          update: {
            args: Prisma.LastDayOfLastMonthUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          deleteMany: {
            args: Prisma.LastDayOfLastMonthDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LastDayOfLastMonthUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LastDayOfLastMonthUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LastDayOfLastMonthPayload>
          }
          aggregate: {
            args: Prisma.LastDayOfLastMonthAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLastDayOfLastMonth>
          }
          groupBy: {
            args: Prisma.LastDayOfLastMonthGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LastDayOfLastMonthGroupByOutputType>[]
          }
          count: {
            args: Prisma.LastDayOfLastMonthCountArgs<ExtArgs>,
            result: $Utils.Optional<LastDayOfLastMonthCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CollaboratorCountOutputType
   */

  export type CollaboratorCountOutputType = {
    dayOffs: number
    lastDayOfLastMonth: number
  }

  export type CollaboratorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dayOffs?: boolean | CollaboratorCountOutputTypeCountDayOffsArgs
    lastDayOfLastMonth?: boolean | CollaboratorCountOutputTypeCountLastDayOfLastMonthArgs
  }

  // Custom InputTypes
  /**
   * CollaboratorCountOutputType without action
   */
  export type CollaboratorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaboratorCountOutputType
     */
    select?: CollaboratorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollaboratorCountOutputType without action
   */
  export type CollaboratorCountOutputTypeCountDayOffsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayOffWhereInput
  }

  /**
   * CollaboratorCountOutputType without action
   */
  export type CollaboratorCountOutputTypeCountLastDayOfLastMonthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LastDayOfLastMonthWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Manager
   */

  export type AggregateManager = {
    _count: ManagerCountAggregateOutputType | null
    _min: ManagerMinAggregateOutputType | null
    _max: ManagerMaxAggregateOutputType | null
  }

  export type ManagerMinAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type ManagerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type ManagerCountAggregateOutputType = {
    id: number
    name: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type ManagerMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
  }

  export type ManagerMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
  }

  export type ManagerCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type ManagerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manager to aggregate.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Managers
    **/
    _count?: true | ManagerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManagerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManagerMaxAggregateInputType
  }

  export type GetManagerAggregateType<T extends ManagerAggregateArgs> = {
        [P in keyof T & keyof AggregateManager]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManager[P]>
      : GetScalarType<T[P], AggregateManager[P]>
  }




  export type ManagerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagerWhereInput
    orderBy?: ManagerOrderByWithAggregationInput | ManagerOrderByWithAggregationInput[]
    by: ManagerScalarFieldEnum[] | ManagerScalarFieldEnum
    having?: ManagerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManagerCountAggregateInputType | true
    _min?: ManagerMinAggregateInputType
    _max?: ManagerMaxAggregateInputType
  }

  export type ManagerGroupByOutputType = {
    id: string
    name: string
    username: string
    email: string
    password: string
    _count: ManagerCountAggregateOutputType | null
    _min: ManagerMinAggregateOutputType | null
    _max: ManagerMaxAggregateOutputType | null
  }

  type GetManagerGroupByPayload<T extends ManagerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManagerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManagerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManagerGroupByOutputType[P]>
            : GetScalarType<T[P], ManagerGroupByOutputType[P]>
        }
      >
    >


  export type ManagerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["manager"]>

  export type ManagerSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }



  export type $ManagerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manager"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      username: string
      email: string
      password: string
    }, ExtArgs["result"]["manager"]>
    composites: {}
  }


  type ManagerGetPayload<S extends boolean | null | undefined | ManagerDefaultArgs> = $Result.GetResult<Prisma.$ManagerPayload, S>

  type ManagerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManagerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManagerCountAggregateInputType | true
    }

  export interface ManagerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manager'], meta: { name: 'Manager' } }
    /**
     * Find zero or one Manager that matches the filter.
     * @param {ManagerFindUniqueArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ManagerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerFindUniqueArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Manager that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ManagerFindUniqueOrThrowArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ManagerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Manager that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindFirstArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ManagerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerFindFirstArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Manager that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindFirstOrThrowArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ManagerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Managers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Managers
     * const managers = await prisma.manager.findMany()
     * 
     * // Get first 10 Managers
     * const managers = await prisma.manager.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const managerWithIdOnly = await prisma.manager.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ManagerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Manager.
     * @param {ManagerCreateArgs} args - Arguments to create a Manager.
     * @example
     * // Create one Manager
     * const Manager = await prisma.manager.create({
     *   data: {
     *     // ... data to create a Manager
     *   }
     * })
     * 
    **/
    create<T extends ManagerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerCreateArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Managers.
     *     @param {ManagerCreateManyArgs} args - Arguments to create many Managers.
     *     @example
     *     // Create many Managers
     *     const manager = await prisma.manager.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ManagerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Manager.
     * @param {ManagerDeleteArgs} args - Arguments to delete one Manager.
     * @example
     * // Delete one Manager
     * const Manager = await prisma.manager.delete({
     *   where: {
     *     // ... filter to delete one Manager
     *   }
     * })
     * 
    **/
    delete<T extends ManagerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerDeleteArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Manager.
     * @param {ManagerUpdateArgs} args - Arguments to update one Manager.
     * @example
     * // Update one Manager
     * const manager = await prisma.manager.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ManagerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerUpdateArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Managers.
     * @param {ManagerDeleteManyArgs} args - Arguments to filter Managers to delete.
     * @example
     * // Delete a few Managers
     * const { count } = await prisma.manager.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ManagerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManagerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Managers
     * const manager = await prisma.manager.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ManagerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manager.
     * @param {ManagerUpsertArgs} args - Arguments to update or create a Manager.
     * @example
     * // Update or create a Manager
     * const manager = await prisma.manager.upsert({
     *   create: {
     *     // ... data to create a Manager
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manager we want to update
     *   }
     * })
    **/
    upsert<T extends ManagerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ManagerUpsertArgs<ExtArgs>>
    ): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCountArgs} args - Arguments to filter Managers to count.
     * @example
     * // Count the number of Managers
     * const count = await prisma.manager.count({
     *   where: {
     *     // ... the filter for the Managers we want to count
     *   }
     * })
    **/
    count<T extends ManagerCountArgs>(
      args?: Subset<T, ManagerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManagerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManagerAggregateArgs>(args: Subset<T, ManagerAggregateArgs>): Prisma.PrismaPromise<GetManagerAggregateType<T>>

    /**
     * Group by Manager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManagerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManagerGroupByArgs['orderBy'] }
        : { orderBy?: ManagerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManagerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manager model
   */
  readonly fields: ManagerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manager.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManagerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Manager model
   */ 
  interface ManagerFieldRefs {
    readonly id: FieldRef<"Manager", 'String'>
    readonly name: FieldRef<"Manager", 'String'>
    readonly username: FieldRef<"Manager", 'String'>
    readonly email: FieldRef<"Manager", 'String'>
    readonly password: FieldRef<"Manager", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Manager findUnique
   */
  export type ManagerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager findUniqueOrThrow
   */
  export type ManagerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager findFirst
   */
  export type ManagerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager findFirstOrThrow
   */
  export type ManagerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager findMany
   */
  export type ManagerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager create
   */
  export type ManagerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * The data needed to create a Manager.
     */
    data: XOR<ManagerCreateInput, ManagerUncheckedCreateInput>
  }

  /**
   * Manager createMany
   */
  export type ManagerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Managers.
     */
    data: ManagerCreateManyInput | ManagerCreateManyInput[]
  }

  /**
   * Manager update
   */
  export type ManagerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * The data needed to update a Manager.
     */
    data: XOR<ManagerUpdateInput, ManagerUncheckedUpdateInput>
    /**
     * Choose, which Manager to update.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager updateMany
   */
  export type ManagerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Managers.
     */
    data: XOR<ManagerUpdateManyMutationInput, ManagerUncheckedUpdateManyInput>
    /**
     * Filter which Managers to update
     */
    where?: ManagerWhereInput
  }

  /**
   * Manager upsert
   */
  export type ManagerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * The filter to search for the Manager to update in case it exists.
     */
    where: ManagerWhereUniqueInput
    /**
     * In case the Manager found by the `where` argument doesn't exist, create a new Manager with this data.
     */
    create: XOR<ManagerCreateInput, ManagerUncheckedCreateInput>
    /**
     * In case the Manager was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManagerUpdateInput, ManagerUncheckedUpdateInput>
  }

  /**
   * Manager delete
   */
  export type ManagerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Filter which Manager to delete.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager deleteMany
   */
  export type ManagerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Managers to delete
     */
    where?: ManagerWhereInput
  }

  /**
   * Manager without action
   */
  export type ManagerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
  }


  /**
   * Model Collaborator
   */

  export type AggregateCollaborator = {
    _count: CollaboratorCountAggregateOutputType | null
    _min: CollaboratorMinAggregateOutputType | null
    _max: CollaboratorMaxAggregateOutputType | null
  }

  export type CollaboratorMinAggregateOutputType = {
    id: string | null
    name: string | null
    seniority: string | null
    schedule: string | null
  }

  export type CollaboratorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    seniority: string | null
    schedule: string | null
  }

  export type CollaboratorCountAggregateOutputType = {
    id: number
    name: number
    seniority: number
    schedule: number
    _all: number
  }


  export type CollaboratorMinAggregateInputType = {
    id?: true
    name?: true
    seniority?: true
    schedule?: true
  }

  export type CollaboratorMaxAggregateInputType = {
    id?: true
    name?: true
    seniority?: true
    schedule?: true
  }

  export type CollaboratorCountAggregateInputType = {
    id?: true
    name?: true
    seniority?: true
    schedule?: true
    _all?: true
  }

  export type CollaboratorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collaborator to aggregate.
     */
    where?: CollaboratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collaborators to fetch.
     */
    orderBy?: CollaboratorOrderByWithRelationInput | CollaboratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaboratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Collaborators
    **/
    _count?: true | CollaboratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaboratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaboratorMaxAggregateInputType
  }

  export type GetCollaboratorAggregateType<T extends CollaboratorAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborator[P]>
      : GetScalarType<T[P], AggregateCollaborator[P]>
  }




  export type CollaboratorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaboratorWhereInput
    orderBy?: CollaboratorOrderByWithAggregationInput | CollaboratorOrderByWithAggregationInput[]
    by: CollaboratorScalarFieldEnum[] | CollaboratorScalarFieldEnum
    having?: CollaboratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaboratorCountAggregateInputType | true
    _min?: CollaboratorMinAggregateInputType
    _max?: CollaboratorMaxAggregateInputType
  }

  export type CollaboratorGroupByOutputType = {
    id: string
    name: string
    seniority: string
    schedule: string
    _count: CollaboratorCountAggregateOutputType | null
    _min: CollaboratorMinAggregateOutputType | null
    _max: CollaboratorMaxAggregateOutputType | null
  }

  type GetCollaboratorGroupByPayload<T extends CollaboratorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaboratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaboratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaboratorGroupByOutputType[P]>
            : GetScalarType<T[P], CollaboratorGroupByOutputType[P]>
        }
      >
    >


  export type CollaboratorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    seniority?: boolean
    schedule?: boolean
    dayOffs?: boolean | Collaborator$dayOffsArgs<ExtArgs>
    lastDayOfLastMonth?: boolean | Collaborator$lastDayOfLastMonthArgs<ExtArgs>
    _count?: boolean | CollaboratorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborator"]>

  export type CollaboratorSelectScalar = {
    id?: boolean
    name?: boolean
    seniority?: boolean
    schedule?: boolean
  }


  export type CollaboratorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dayOffs?: boolean | Collaborator$dayOffsArgs<ExtArgs>
    lastDayOfLastMonth?: boolean | Collaborator$lastDayOfLastMonthArgs<ExtArgs>
    _count?: boolean | CollaboratorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CollaboratorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Collaborator"
    objects: {
      dayOffs: Prisma.$DayOffPayload<ExtArgs>[]
      lastDayOfLastMonth: Prisma.$LastDayOfLastMonthPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      seniority: string
      schedule: string
    }, ExtArgs["result"]["collaborator"]>
    composites: {}
  }


  type CollaboratorGetPayload<S extends boolean | null | undefined | CollaboratorDefaultArgs> = $Result.GetResult<Prisma.$CollaboratorPayload, S>

  type CollaboratorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaboratorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaboratorCountAggregateInputType | true
    }

  export interface CollaboratorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Collaborator'], meta: { name: 'Collaborator' } }
    /**
     * Find zero or one Collaborator that matches the filter.
     * @param {CollaboratorFindUniqueArgs} args - Arguments to find a Collaborator
     * @example
     * // Get one Collaborator
     * const collaborator = await prisma.collaborator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CollaboratorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorFindUniqueArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Collaborator that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CollaboratorFindUniqueOrThrowArgs} args - Arguments to find a Collaborator
     * @example
     * // Get one Collaborator
     * const collaborator = await prisma.collaborator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CollaboratorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Collaborator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorFindFirstArgs} args - Arguments to find a Collaborator
     * @example
     * // Get one Collaborator
     * const collaborator = await prisma.collaborator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CollaboratorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorFindFirstArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Collaborator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorFindFirstOrThrowArgs} args - Arguments to find a Collaborator
     * @example
     * // Get one Collaborator
     * const collaborator = await prisma.collaborator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CollaboratorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Collaborators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collaborators
     * const collaborators = await prisma.collaborator.findMany()
     * 
     * // Get first 10 Collaborators
     * const collaborators = await prisma.collaborator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collaboratorWithIdOnly = await prisma.collaborator.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CollaboratorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Collaborator.
     * @param {CollaboratorCreateArgs} args - Arguments to create a Collaborator.
     * @example
     * // Create one Collaborator
     * const Collaborator = await prisma.collaborator.create({
     *   data: {
     *     // ... data to create a Collaborator
     *   }
     * })
     * 
    **/
    create<T extends CollaboratorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorCreateArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Collaborators.
     *     @param {CollaboratorCreateManyArgs} args - Arguments to create many Collaborators.
     *     @example
     *     // Create many Collaborators
     *     const collaborator = await prisma.collaborator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CollaboratorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Collaborator.
     * @param {CollaboratorDeleteArgs} args - Arguments to delete one Collaborator.
     * @example
     * // Delete one Collaborator
     * const Collaborator = await prisma.collaborator.delete({
     *   where: {
     *     // ... filter to delete one Collaborator
     *   }
     * })
     * 
    **/
    delete<T extends CollaboratorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorDeleteArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Collaborator.
     * @param {CollaboratorUpdateArgs} args - Arguments to update one Collaborator.
     * @example
     * // Update one Collaborator
     * const collaborator = await prisma.collaborator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CollaboratorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorUpdateArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Collaborators.
     * @param {CollaboratorDeleteManyArgs} args - Arguments to filter Collaborators to delete.
     * @example
     * // Delete a few Collaborators
     * const { count } = await prisma.collaborator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CollaboratorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollaboratorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collaborators
     * const collaborator = await prisma.collaborator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CollaboratorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Collaborator.
     * @param {CollaboratorUpsertArgs} args - Arguments to update or create a Collaborator.
     * @example
     * // Update or create a Collaborator
     * const collaborator = await prisma.collaborator.upsert({
     *   create: {
     *     // ... data to create a Collaborator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collaborator we want to update
     *   }
     * })
    **/
    upsert<T extends CollaboratorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CollaboratorUpsertArgs<ExtArgs>>
    ): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Collaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorCountArgs} args - Arguments to filter Collaborators to count.
     * @example
     * // Count the number of Collaborators
     * const count = await prisma.collaborator.count({
     *   where: {
     *     // ... the filter for the Collaborators we want to count
     *   }
     * })
    **/
    count<T extends CollaboratorCountArgs>(
      args?: Subset<T, CollaboratorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaboratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collaborator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaboratorAggregateArgs>(args: Subset<T, CollaboratorAggregateArgs>): Prisma.PrismaPromise<GetCollaboratorAggregateType<T>>

    /**
     * Group by Collaborator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaboratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaboratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaboratorGroupByArgs['orderBy'] }
        : { orderBy?: CollaboratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaboratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaboratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Collaborator model
   */
  readonly fields: CollaboratorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Collaborator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaboratorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dayOffs<T extends Collaborator$dayOffsArgs<ExtArgs> = {}>(args?: Subset<T, Collaborator$dayOffsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findMany'> | Null>;

    lastDayOfLastMonth<T extends Collaborator$lastDayOfLastMonthArgs<ExtArgs> = {}>(args?: Subset<T, Collaborator$lastDayOfLastMonthArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Collaborator model
   */ 
  interface CollaboratorFieldRefs {
    readonly id: FieldRef<"Collaborator", 'String'>
    readonly name: FieldRef<"Collaborator", 'String'>
    readonly seniority: FieldRef<"Collaborator", 'String'>
    readonly schedule: FieldRef<"Collaborator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Collaborator findUnique
   */
  export type CollaboratorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter, which Collaborator to fetch.
     */
    where: CollaboratorWhereUniqueInput
  }

  /**
   * Collaborator findUniqueOrThrow
   */
  export type CollaboratorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter, which Collaborator to fetch.
     */
    where: CollaboratorWhereUniqueInput
  }

  /**
   * Collaborator findFirst
   */
  export type CollaboratorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter, which Collaborator to fetch.
     */
    where?: CollaboratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collaborators to fetch.
     */
    orderBy?: CollaboratorOrderByWithRelationInput | CollaboratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collaborators.
     */
    cursor?: CollaboratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collaborators.
     */
    distinct?: CollaboratorScalarFieldEnum | CollaboratorScalarFieldEnum[]
  }

  /**
   * Collaborator findFirstOrThrow
   */
  export type CollaboratorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter, which Collaborator to fetch.
     */
    where?: CollaboratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collaborators to fetch.
     */
    orderBy?: CollaboratorOrderByWithRelationInput | CollaboratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collaborators.
     */
    cursor?: CollaboratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collaborators.
     */
    distinct?: CollaboratorScalarFieldEnum | CollaboratorScalarFieldEnum[]
  }

  /**
   * Collaborator findMany
   */
  export type CollaboratorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter, which Collaborators to fetch.
     */
    where?: CollaboratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collaborators to fetch.
     */
    orderBy?: CollaboratorOrderByWithRelationInput | CollaboratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Collaborators.
     */
    cursor?: CollaboratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collaborators.
     */
    skip?: number
    distinct?: CollaboratorScalarFieldEnum | CollaboratorScalarFieldEnum[]
  }

  /**
   * Collaborator create
   */
  export type CollaboratorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * The data needed to create a Collaborator.
     */
    data: XOR<CollaboratorCreateInput, CollaboratorUncheckedCreateInput>
  }

  /**
   * Collaborator createMany
   */
  export type CollaboratorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Collaborators.
     */
    data: CollaboratorCreateManyInput | CollaboratorCreateManyInput[]
  }

  /**
   * Collaborator update
   */
  export type CollaboratorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * The data needed to update a Collaborator.
     */
    data: XOR<CollaboratorUpdateInput, CollaboratorUncheckedUpdateInput>
    /**
     * Choose, which Collaborator to update.
     */
    where: CollaboratorWhereUniqueInput
  }

  /**
   * Collaborator updateMany
   */
  export type CollaboratorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Collaborators.
     */
    data: XOR<CollaboratorUpdateManyMutationInput, CollaboratorUncheckedUpdateManyInput>
    /**
     * Filter which Collaborators to update
     */
    where?: CollaboratorWhereInput
  }

  /**
   * Collaborator upsert
   */
  export type CollaboratorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * The filter to search for the Collaborator to update in case it exists.
     */
    where: CollaboratorWhereUniqueInput
    /**
     * In case the Collaborator found by the `where` argument doesn't exist, create a new Collaborator with this data.
     */
    create: XOR<CollaboratorCreateInput, CollaboratorUncheckedCreateInput>
    /**
     * In case the Collaborator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaboratorUpdateInput, CollaboratorUncheckedUpdateInput>
  }

  /**
   * Collaborator delete
   */
  export type CollaboratorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
    /**
     * Filter which Collaborator to delete.
     */
    where: CollaboratorWhereUniqueInput
  }

  /**
   * Collaborator deleteMany
   */
  export type CollaboratorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collaborators to delete
     */
    where?: CollaboratorWhereInput
  }

  /**
   * Collaborator.dayOffs
   */
  export type Collaborator$dayOffsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    where?: DayOffWhereInput
    orderBy?: DayOffOrderByWithRelationInput | DayOffOrderByWithRelationInput[]
    cursor?: DayOffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DayOffScalarFieldEnum | DayOffScalarFieldEnum[]
  }

  /**
   * Collaborator.lastDayOfLastMonth
   */
  export type Collaborator$lastDayOfLastMonthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    where?: LastDayOfLastMonthWhereInput
    orderBy?: LastDayOfLastMonthOrderByWithRelationInput | LastDayOfLastMonthOrderByWithRelationInput[]
    cursor?: LastDayOfLastMonthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LastDayOfLastMonthScalarFieldEnum | LastDayOfLastMonthScalarFieldEnum[]
  }

  /**
   * Collaborator without action
   */
  export type CollaboratorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collaborator
     */
    select?: CollaboratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaboratorInclude<ExtArgs> | null
  }


  /**
   * Model DayOff
   */

  export type AggregateDayOff = {
    _count: DayOffCountAggregateOutputType | null
    _min: DayOffMinAggregateOutputType | null
    _max: DayOffMaxAggregateOutputType | null
  }

  export type DayOffMinAggregateOutputType = {
    id: string | null
    date: Date | null
    collaboratorId: string | null
  }

  export type DayOffMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    collaboratorId: string | null
  }

  export type DayOffCountAggregateOutputType = {
    id: number
    date: number
    collaboratorId: number
    _all: number
  }


  export type DayOffMinAggregateInputType = {
    id?: true
    date?: true
    collaboratorId?: true
  }

  export type DayOffMaxAggregateInputType = {
    id?: true
    date?: true
    collaboratorId?: true
  }

  export type DayOffCountAggregateInputType = {
    id?: true
    date?: true
    collaboratorId?: true
    _all?: true
  }

  export type DayOffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DayOff to aggregate.
     */
    where?: DayOffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayOffs to fetch.
     */
    orderBy?: DayOffOrderByWithRelationInput | DayOffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DayOffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayOffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayOffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DayOffs
    **/
    _count?: true | DayOffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DayOffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DayOffMaxAggregateInputType
  }

  export type GetDayOffAggregateType<T extends DayOffAggregateArgs> = {
        [P in keyof T & keyof AggregateDayOff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDayOff[P]>
      : GetScalarType<T[P], AggregateDayOff[P]>
  }




  export type DayOffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DayOffWhereInput
    orderBy?: DayOffOrderByWithAggregationInput | DayOffOrderByWithAggregationInput[]
    by: DayOffScalarFieldEnum[] | DayOffScalarFieldEnum
    having?: DayOffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DayOffCountAggregateInputType | true
    _min?: DayOffMinAggregateInputType
    _max?: DayOffMaxAggregateInputType
  }

  export type DayOffGroupByOutputType = {
    id: string
    date: Date
    collaboratorId: string
    _count: DayOffCountAggregateOutputType | null
    _min: DayOffMinAggregateOutputType | null
    _max: DayOffMaxAggregateOutputType | null
  }

  type GetDayOffGroupByPayload<T extends DayOffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DayOffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DayOffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DayOffGroupByOutputType[P]>
            : GetScalarType<T[P], DayOffGroupByOutputType[P]>
        }
      >
    >


  export type DayOffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    collaboratorId?: boolean
    Collaborator?: boolean | CollaboratorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dayOff"]>

  export type DayOffSelectScalar = {
    id?: boolean
    date?: boolean
    collaboratorId?: boolean
  }


  export type DayOffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Collaborator?: boolean | CollaboratorDefaultArgs<ExtArgs>
  }


  export type $DayOffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DayOff"
    objects: {
      Collaborator: Prisma.$CollaboratorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      collaboratorId: string
    }, ExtArgs["result"]["dayOff"]>
    composites: {}
  }


  type DayOffGetPayload<S extends boolean | null | undefined | DayOffDefaultArgs> = $Result.GetResult<Prisma.$DayOffPayload, S>

  type DayOffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DayOffFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DayOffCountAggregateInputType | true
    }

  export interface DayOffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DayOff'], meta: { name: 'DayOff' } }
    /**
     * Find zero or one DayOff that matches the filter.
     * @param {DayOffFindUniqueArgs} args - Arguments to find a DayOff
     * @example
     * // Get one DayOff
     * const dayOff = await prisma.dayOff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DayOffFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffFindUniqueArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DayOff that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DayOffFindUniqueOrThrowArgs} args - Arguments to find a DayOff
     * @example
     * // Get one DayOff
     * const dayOff = await prisma.dayOff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DayOffFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DayOff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffFindFirstArgs} args - Arguments to find a DayOff
     * @example
     * // Get one DayOff
     * const dayOff = await prisma.dayOff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DayOffFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffFindFirstArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DayOff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffFindFirstOrThrowArgs} args - Arguments to find a DayOff
     * @example
     * // Get one DayOff
     * const dayOff = await prisma.dayOff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DayOffFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DayOffs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DayOffs
     * const dayOffs = await prisma.dayOff.findMany()
     * 
     * // Get first 10 DayOffs
     * const dayOffs = await prisma.dayOff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dayOffWithIdOnly = await prisma.dayOff.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DayOffFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DayOff.
     * @param {DayOffCreateArgs} args - Arguments to create a DayOff.
     * @example
     * // Create one DayOff
     * const DayOff = await prisma.dayOff.create({
     *   data: {
     *     // ... data to create a DayOff
     *   }
     * })
     * 
    **/
    create<T extends DayOffCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffCreateArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DayOffs.
     *     @param {DayOffCreateManyArgs} args - Arguments to create many DayOffs.
     *     @example
     *     // Create many DayOffs
     *     const dayOff = await prisma.dayOff.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DayOffCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DayOff.
     * @param {DayOffDeleteArgs} args - Arguments to delete one DayOff.
     * @example
     * // Delete one DayOff
     * const DayOff = await prisma.dayOff.delete({
     *   where: {
     *     // ... filter to delete one DayOff
     *   }
     * })
     * 
    **/
    delete<T extends DayOffDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffDeleteArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DayOff.
     * @param {DayOffUpdateArgs} args - Arguments to update one DayOff.
     * @example
     * // Update one DayOff
     * const dayOff = await prisma.dayOff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DayOffUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffUpdateArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DayOffs.
     * @param {DayOffDeleteManyArgs} args - Arguments to filter DayOffs to delete.
     * @example
     * // Delete a few DayOffs
     * const { count } = await prisma.dayOff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DayOffDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DayOffDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DayOffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DayOffs
     * const dayOff = await prisma.dayOff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DayOffUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DayOff.
     * @param {DayOffUpsertArgs} args - Arguments to update or create a DayOff.
     * @example
     * // Update or create a DayOff
     * const dayOff = await prisma.dayOff.upsert({
     *   create: {
     *     // ... data to create a DayOff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DayOff we want to update
     *   }
     * })
    **/
    upsert<T extends DayOffUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DayOffUpsertArgs<ExtArgs>>
    ): Prisma__DayOffClient<$Result.GetResult<Prisma.$DayOffPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DayOffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffCountArgs} args - Arguments to filter DayOffs to count.
     * @example
     * // Count the number of DayOffs
     * const count = await prisma.dayOff.count({
     *   where: {
     *     // ... the filter for the DayOffs we want to count
     *   }
     * })
    **/
    count<T extends DayOffCountArgs>(
      args?: Subset<T, DayOffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DayOffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DayOff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DayOffAggregateArgs>(args: Subset<T, DayOffAggregateArgs>): Prisma.PrismaPromise<GetDayOffAggregateType<T>>

    /**
     * Group by DayOff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DayOffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DayOffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DayOffGroupByArgs['orderBy'] }
        : { orderBy?: DayOffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DayOffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDayOffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DayOff model
   */
  readonly fields: DayOffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DayOff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DayOffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Collaborator<T extends CollaboratorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollaboratorDefaultArgs<ExtArgs>>): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DayOff model
   */ 
  interface DayOffFieldRefs {
    readonly id: FieldRef<"DayOff", 'String'>
    readonly date: FieldRef<"DayOff", 'DateTime'>
    readonly collaboratorId: FieldRef<"DayOff", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DayOff findUnique
   */
  export type DayOffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter, which DayOff to fetch.
     */
    where: DayOffWhereUniqueInput
  }

  /**
   * DayOff findUniqueOrThrow
   */
  export type DayOffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter, which DayOff to fetch.
     */
    where: DayOffWhereUniqueInput
  }

  /**
   * DayOff findFirst
   */
  export type DayOffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter, which DayOff to fetch.
     */
    where?: DayOffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayOffs to fetch.
     */
    orderBy?: DayOffOrderByWithRelationInput | DayOffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DayOffs.
     */
    cursor?: DayOffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayOffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayOffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DayOffs.
     */
    distinct?: DayOffScalarFieldEnum | DayOffScalarFieldEnum[]
  }

  /**
   * DayOff findFirstOrThrow
   */
  export type DayOffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter, which DayOff to fetch.
     */
    where?: DayOffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayOffs to fetch.
     */
    orderBy?: DayOffOrderByWithRelationInput | DayOffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DayOffs.
     */
    cursor?: DayOffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayOffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayOffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DayOffs.
     */
    distinct?: DayOffScalarFieldEnum | DayOffScalarFieldEnum[]
  }

  /**
   * DayOff findMany
   */
  export type DayOffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter, which DayOffs to fetch.
     */
    where?: DayOffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DayOffs to fetch.
     */
    orderBy?: DayOffOrderByWithRelationInput | DayOffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DayOffs.
     */
    cursor?: DayOffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DayOffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DayOffs.
     */
    skip?: number
    distinct?: DayOffScalarFieldEnum | DayOffScalarFieldEnum[]
  }

  /**
   * DayOff create
   */
  export type DayOffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * The data needed to create a DayOff.
     */
    data: XOR<DayOffCreateInput, DayOffUncheckedCreateInput>
  }

  /**
   * DayOff createMany
   */
  export type DayOffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DayOffs.
     */
    data: DayOffCreateManyInput | DayOffCreateManyInput[]
  }

  /**
   * DayOff update
   */
  export type DayOffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * The data needed to update a DayOff.
     */
    data: XOR<DayOffUpdateInput, DayOffUncheckedUpdateInput>
    /**
     * Choose, which DayOff to update.
     */
    where: DayOffWhereUniqueInput
  }

  /**
   * DayOff updateMany
   */
  export type DayOffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DayOffs.
     */
    data: XOR<DayOffUpdateManyMutationInput, DayOffUncheckedUpdateManyInput>
    /**
     * Filter which DayOffs to update
     */
    where?: DayOffWhereInput
  }

  /**
   * DayOff upsert
   */
  export type DayOffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * The filter to search for the DayOff to update in case it exists.
     */
    where: DayOffWhereUniqueInput
    /**
     * In case the DayOff found by the `where` argument doesn't exist, create a new DayOff with this data.
     */
    create: XOR<DayOffCreateInput, DayOffUncheckedCreateInput>
    /**
     * In case the DayOff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DayOffUpdateInput, DayOffUncheckedUpdateInput>
  }

  /**
   * DayOff delete
   */
  export type DayOffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
    /**
     * Filter which DayOff to delete.
     */
    where: DayOffWhereUniqueInput
  }

  /**
   * DayOff deleteMany
   */
  export type DayOffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DayOffs to delete
     */
    where?: DayOffWhereInput
  }

  /**
   * DayOff without action
   */
  export type DayOffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DayOff
     */
    select?: DayOffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DayOffInclude<ExtArgs> | null
  }


  /**
   * Model LastDayOfLastMonth
   */

  export type AggregateLastDayOfLastMonth = {
    _count: LastDayOfLastMonthCountAggregateOutputType | null
    _avg: LastDayOfLastMonthAvgAggregateOutputType | null
    _sum: LastDayOfLastMonthSumAggregateOutputType | null
    _min: LastDayOfLastMonthMinAggregateOutputType | null
    _max: LastDayOfLastMonthMaxAggregateOutputType | null
  }

  export type LastDayOfLastMonthAvgAggregateOutputType = {
    QtdDayOff: number | null
  }

  export type LastDayOfLastMonthSumAggregateOutputType = {
    QtdDayOff: number | null
  }

  export type LastDayOfLastMonthMinAggregateOutputType = {
    id: string | null
    date: Date | null
    CollaboratorId: string | null
    QtdDayOff: number | null
    WeekDay: string | null
  }

  export type LastDayOfLastMonthMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    CollaboratorId: string | null
    QtdDayOff: number | null
    WeekDay: string | null
  }

  export type LastDayOfLastMonthCountAggregateOutputType = {
    id: number
    date: number
    CollaboratorId: number
    QtdDayOff: number
    WeekDay: number
    _all: number
  }


  export type LastDayOfLastMonthAvgAggregateInputType = {
    QtdDayOff?: true
  }

  export type LastDayOfLastMonthSumAggregateInputType = {
    QtdDayOff?: true
  }

  export type LastDayOfLastMonthMinAggregateInputType = {
    id?: true
    date?: true
    CollaboratorId?: true
    QtdDayOff?: true
    WeekDay?: true
  }

  export type LastDayOfLastMonthMaxAggregateInputType = {
    id?: true
    date?: true
    CollaboratorId?: true
    QtdDayOff?: true
    WeekDay?: true
  }

  export type LastDayOfLastMonthCountAggregateInputType = {
    id?: true
    date?: true
    CollaboratorId?: true
    QtdDayOff?: true
    WeekDay?: true
    _all?: true
  }

  export type LastDayOfLastMonthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LastDayOfLastMonth to aggregate.
     */
    where?: LastDayOfLastMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastDayOfLastMonths to fetch.
     */
    orderBy?: LastDayOfLastMonthOrderByWithRelationInput | LastDayOfLastMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LastDayOfLastMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastDayOfLastMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastDayOfLastMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LastDayOfLastMonths
    **/
    _count?: true | LastDayOfLastMonthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LastDayOfLastMonthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LastDayOfLastMonthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LastDayOfLastMonthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LastDayOfLastMonthMaxAggregateInputType
  }

  export type GetLastDayOfLastMonthAggregateType<T extends LastDayOfLastMonthAggregateArgs> = {
        [P in keyof T & keyof AggregateLastDayOfLastMonth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLastDayOfLastMonth[P]>
      : GetScalarType<T[P], AggregateLastDayOfLastMonth[P]>
  }




  export type LastDayOfLastMonthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LastDayOfLastMonthWhereInput
    orderBy?: LastDayOfLastMonthOrderByWithAggregationInput | LastDayOfLastMonthOrderByWithAggregationInput[]
    by: LastDayOfLastMonthScalarFieldEnum[] | LastDayOfLastMonthScalarFieldEnum
    having?: LastDayOfLastMonthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LastDayOfLastMonthCountAggregateInputType | true
    _avg?: LastDayOfLastMonthAvgAggregateInputType
    _sum?: LastDayOfLastMonthSumAggregateInputType
    _min?: LastDayOfLastMonthMinAggregateInputType
    _max?: LastDayOfLastMonthMaxAggregateInputType
  }

  export type LastDayOfLastMonthGroupByOutputType = {
    id: string
    date: Date
    CollaboratorId: string
    QtdDayOff: number
    WeekDay: string
    _count: LastDayOfLastMonthCountAggregateOutputType | null
    _avg: LastDayOfLastMonthAvgAggregateOutputType | null
    _sum: LastDayOfLastMonthSumAggregateOutputType | null
    _min: LastDayOfLastMonthMinAggregateOutputType | null
    _max: LastDayOfLastMonthMaxAggregateOutputType | null
  }

  type GetLastDayOfLastMonthGroupByPayload<T extends LastDayOfLastMonthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LastDayOfLastMonthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LastDayOfLastMonthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LastDayOfLastMonthGroupByOutputType[P]>
            : GetScalarType<T[P], LastDayOfLastMonthGroupByOutputType[P]>
        }
      >
    >


  export type LastDayOfLastMonthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    CollaboratorId?: boolean
    QtdDayOff?: boolean
    WeekDay?: boolean
    Collaborator?: boolean | CollaboratorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lastDayOfLastMonth"]>

  export type LastDayOfLastMonthSelectScalar = {
    id?: boolean
    date?: boolean
    CollaboratorId?: boolean
    QtdDayOff?: boolean
    WeekDay?: boolean
  }


  export type LastDayOfLastMonthInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Collaborator?: boolean | CollaboratorDefaultArgs<ExtArgs>
  }


  export type $LastDayOfLastMonthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LastDayOfLastMonth"
    objects: {
      Collaborator: Prisma.$CollaboratorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      CollaboratorId: string
      QtdDayOff: number
      WeekDay: string
    }, ExtArgs["result"]["lastDayOfLastMonth"]>
    composites: {}
  }


  type LastDayOfLastMonthGetPayload<S extends boolean | null | undefined | LastDayOfLastMonthDefaultArgs> = $Result.GetResult<Prisma.$LastDayOfLastMonthPayload, S>

  type LastDayOfLastMonthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LastDayOfLastMonthFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LastDayOfLastMonthCountAggregateInputType | true
    }

  export interface LastDayOfLastMonthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LastDayOfLastMonth'], meta: { name: 'LastDayOfLastMonth' } }
    /**
     * Find zero or one LastDayOfLastMonth that matches the filter.
     * @param {LastDayOfLastMonthFindUniqueArgs} args - Arguments to find a LastDayOfLastMonth
     * @example
     * // Get one LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LastDayOfLastMonthFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthFindUniqueArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LastDayOfLastMonth that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LastDayOfLastMonthFindUniqueOrThrowArgs} args - Arguments to find a LastDayOfLastMonth
     * @example
     * // Get one LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LastDayOfLastMonthFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LastDayOfLastMonth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthFindFirstArgs} args - Arguments to find a LastDayOfLastMonth
     * @example
     * // Get one LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LastDayOfLastMonthFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthFindFirstArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LastDayOfLastMonth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthFindFirstOrThrowArgs} args - Arguments to find a LastDayOfLastMonth
     * @example
     * // Get one LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LastDayOfLastMonthFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LastDayOfLastMonths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LastDayOfLastMonths
     * const lastDayOfLastMonths = await prisma.lastDayOfLastMonth.findMany()
     * 
     * // Get first 10 LastDayOfLastMonths
     * const lastDayOfLastMonths = await prisma.lastDayOfLastMonth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lastDayOfLastMonthWithIdOnly = await prisma.lastDayOfLastMonth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LastDayOfLastMonthFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LastDayOfLastMonth.
     * @param {LastDayOfLastMonthCreateArgs} args - Arguments to create a LastDayOfLastMonth.
     * @example
     * // Create one LastDayOfLastMonth
     * const LastDayOfLastMonth = await prisma.lastDayOfLastMonth.create({
     *   data: {
     *     // ... data to create a LastDayOfLastMonth
     *   }
     * })
     * 
    **/
    create<T extends LastDayOfLastMonthCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthCreateArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LastDayOfLastMonths.
     *     @param {LastDayOfLastMonthCreateManyArgs} args - Arguments to create many LastDayOfLastMonths.
     *     @example
     *     // Create many LastDayOfLastMonths
     *     const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LastDayOfLastMonthCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LastDayOfLastMonth.
     * @param {LastDayOfLastMonthDeleteArgs} args - Arguments to delete one LastDayOfLastMonth.
     * @example
     * // Delete one LastDayOfLastMonth
     * const LastDayOfLastMonth = await prisma.lastDayOfLastMonth.delete({
     *   where: {
     *     // ... filter to delete one LastDayOfLastMonth
     *   }
     * })
     * 
    **/
    delete<T extends LastDayOfLastMonthDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthDeleteArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LastDayOfLastMonth.
     * @param {LastDayOfLastMonthUpdateArgs} args - Arguments to update one LastDayOfLastMonth.
     * @example
     * // Update one LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LastDayOfLastMonthUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthUpdateArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LastDayOfLastMonths.
     * @param {LastDayOfLastMonthDeleteManyArgs} args - Arguments to filter LastDayOfLastMonths to delete.
     * @example
     * // Delete a few LastDayOfLastMonths
     * const { count } = await prisma.lastDayOfLastMonth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LastDayOfLastMonthDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LastDayOfLastMonthDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LastDayOfLastMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LastDayOfLastMonths
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LastDayOfLastMonthUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LastDayOfLastMonth.
     * @param {LastDayOfLastMonthUpsertArgs} args - Arguments to update or create a LastDayOfLastMonth.
     * @example
     * // Update or create a LastDayOfLastMonth
     * const lastDayOfLastMonth = await prisma.lastDayOfLastMonth.upsert({
     *   create: {
     *     // ... data to create a LastDayOfLastMonth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LastDayOfLastMonth we want to update
     *   }
     * })
    **/
    upsert<T extends LastDayOfLastMonthUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LastDayOfLastMonthUpsertArgs<ExtArgs>>
    ): Prisma__LastDayOfLastMonthClient<$Result.GetResult<Prisma.$LastDayOfLastMonthPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LastDayOfLastMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthCountArgs} args - Arguments to filter LastDayOfLastMonths to count.
     * @example
     * // Count the number of LastDayOfLastMonths
     * const count = await prisma.lastDayOfLastMonth.count({
     *   where: {
     *     // ... the filter for the LastDayOfLastMonths we want to count
     *   }
     * })
    **/
    count<T extends LastDayOfLastMonthCountArgs>(
      args?: Subset<T, LastDayOfLastMonthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LastDayOfLastMonthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LastDayOfLastMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LastDayOfLastMonthAggregateArgs>(args: Subset<T, LastDayOfLastMonthAggregateArgs>): Prisma.PrismaPromise<GetLastDayOfLastMonthAggregateType<T>>

    /**
     * Group by LastDayOfLastMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastDayOfLastMonthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LastDayOfLastMonthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LastDayOfLastMonthGroupByArgs['orderBy'] }
        : { orderBy?: LastDayOfLastMonthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LastDayOfLastMonthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLastDayOfLastMonthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LastDayOfLastMonth model
   */
  readonly fields: LastDayOfLastMonthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LastDayOfLastMonth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LastDayOfLastMonthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Collaborator<T extends CollaboratorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollaboratorDefaultArgs<ExtArgs>>): Prisma__CollaboratorClient<$Result.GetResult<Prisma.$CollaboratorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LastDayOfLastMonth model
   */ 
  interface LastDayOfLastMonthFieldRefs {
    readonly id: FieldRef<"LastDayOfLastMonth", 'String'>
    readonly date: FieldRef<"LastDayOfLastMonth", 'DateTime'>
    readonly CollaboratorId: FieldRef<"LastDayOfLastMonth", 'String'>
    readonly QtdDayOff: FieldRef<"LastDayOfLastMonth", 'Int'>
    readonly WeekDay: FieldRef<"LastDayOfLastMonth", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LastDayOfLastMonth findUnique
   */
  export type LastDayOfLastMonthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter, which LastDayOfLastMonth to fetch.
     */
    where: LastDayOfLastMonthWhereUniqueInput
  }

  /**
   * LastDayOfLastMonth findUniqueOrThrow
   */
  export type LastDayOfLastMonthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter, which LastDayOfLastMonth to fetch.
     */
    where: LastDayOfLastMonthWhereUniqueInput
  }

  /**
   * LastDayOfLastMonth findFirst
   */
  export type LastDayOfLastMonthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter, which LastDayOfLastMonth to fetch.
     */
    where?: LastDayOfLastMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastDayOfLastMonths to fetch.
     */
    orderBy?: LastDayOfLastMonthOrderByWithRelationInput | LastDayOfLastMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LastDayOfLastMonths.
     */
    cursor?: LastDayOfLastMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastDayOfLastMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastDayOfLastMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LastDayOfLastMonths.
     */
    distinct?: LastDayOfLastMonthScalarFieldEnum | LastDayOfLastMonthScalarFieldEnum[]
  }

  /**
   * LastDayOfLastMonth findFirstOrThrow
   */
  export type LastDayOfLastMonthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter, which LastDayOfLastMonth to fetch.
     */
    where?: LastDayOfLastMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastDayOfLastMonths to fetch.
     */
    orderBy?: LastDayOfLastMonthOrderByWithRelationInput | LastDayOfLastMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LastDayOfLastMonths.
     */
    cursor?: LastDayOfLastMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastDayOfLastMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastDayOfLastMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LastDayOfLastMonths.
     */
    distinct?: LastDayOfLastMonthScalarFieldEnum | LastDayOfLastMonthScalarFieldEnum[]
  }

  /**
   * LastDayOfLastMonth findMany
   */
  export type LastDayOfLastMonthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter, which LastDayOfLastMonths to fetch.
     */
    where?: LastDayOfLastMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastDayOfLastMonths to fetch.
     */
    orderBy?: LastDayOfLastMonthOrderByWithRelationInput | LastDayOfLastMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LastDayOfLastMonths.
     */
    cursor?: LastDayOfLastMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastDayOfLastMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastDayOfLastMonths.
     */
    skip?: number
    distinct?: LastDayOfLastMonthScalarFieldEnum | LastDayOfLastMonthScalarFieldEnum[]
  }

  /**
   * LastDayOfLastMonth create
   */
  export type LastDayOfLastMonthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * The data needed to create a LastDayOfLastMonth.
     */
    data: XOR<LastDayOfLastMonthCreateInput, LastDayOfLastMonthUncheckedCreateInput>
  }

  /**
   * LastDayOfLastMonth createMany
   */
  export type LastDayOfLastMonthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LastDayOfLastMonths.
     */
    data: LastDayOfLastMonthCreateManyInput | LastDayOfLastMonthCreateManyInput[]
  }

  /**
   * LastDayOfLastMonth update
   */
  export type LastDayOfLastMonthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * The data needed to update a LastDayOfLastMonth.
     */
    data: XOR<LastDayOfLastMonthUpdateInput, LastDayOfLastMonthUncheckedUpdateInput>
    /**
     * Choose, which LastDayOfLastMonth to update.
     */
    where: LastDayOfLastMonthWhereUniqueInput
  }

  /**
   * LastDayOfLastMonth updateMany
   */
  export type LastDayOfLastMonthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LastDayOfLastMonths.
     */
    data: XOR<LastDayOfLastMonthUpdateManyMutationInput, LastDayOfLastMonthUncheckedUpdateManyInput>
    /**
     * Filter which LastDayOfLastMonths to update
     */
    where?: LastDayOfLastMonthWhereInput
  }

  /**
   * LastDayOfLastMonth upsert
   */
  export type LastDayOfLastMonthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * The filter to search for the LastDayOfLastMonth to update in case it exists.
     */
    where: LastDayOfLastMonthWhereUniqueInput
    /**
     * In case the LastDayOfLastMonth found by the `where` argument doesn't exist, create a new LastDayOfLastMonth with this data.
     */
    create: XOR<LastDayOfLastMonthCreateInput, LastDayOfLastMonthUncheckedCreateInput>
    /**
     * In case the LastDayOfLastMonth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LastDayOfLastMonthUpdateInput, LastDayOfLastMonthUncheckedUpdateInput>
  }

  /**
   * LastDayOfLastMonth delete
   */
  export type LastDayOfLastMonthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
    /**
     * Filter which LastDayOfLastMonth to delete.
     */
    where: LastDayOfLastMonthWhereUniqueInput
  }

  /**
   * LastDayOfLastMonth deleteMany
   */
  export type LastDayOfLastMonthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LastDayOfLastMonths to delete
     */
    where?: LastDayOfLastMonthWhereInput
  }

  /**
   * LastDayOfLastMonth without action
   */
  export type LastDayOfLastMonthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LastDayOfLastMonth
     */
    select?: LastDayOfLastMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LastDayOfLastMonthInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ManagerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type ManagerScalarFieldEnum = (typeof ManagerScalarFieldEnum)[keyof typeof ManagerScalarFieldEnum]


  export const CollaboratorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    seniority: 'seniority',
    schedule: 'schedule'
  };

  export type CollaboratorScalarFieldEnum = (typeof CollaboratorScalarFieldEnum)[keyof typeof CollaboratorScalarFieldEnum]


  export const DayOffScalarFieldEnum: {
    id: 'id',
    date: 'date',
    collaboratorId: 'collaboratorId'
  };

  export type DayOffScalarFieldEnum = (typeof DayOffScalarFieldEnum)[keyof typeof DayOffScalarFieldEnum]


  export const LastDayOfLastMonthScalarFieldEnum: {
    id: 'id',
    date: 'date',
    CollaboratorId: 'CollaboratorId',
    QtdDayOff: 'QtdDayOff',
    WeekDay: 'WeekDay'
  };

  export type LastDayOfLastMonthScalarFieldEnum = (typeof LastDayOfLastMonthScalarFieldEnum)[keyof typeof LastDayOfLastMonthScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ManagerWhereInput = {
    AND?: ManagerWhereInput | ManagerWhereInput[]
    OR?: ManagerWhereInput[]
    NOT?: ManagerWhereInput | ManagerWhereInput[]
    id?: StringFilter<"Manager"> | string
    name?: StringFilter<"Manager"> | string
    username?: StringFilter<"Manager"> | string
    email?: StringFilter<"Manager"> | string
    password?: StringFilter<"Manager"> | string
  }

  export type ManagerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ManagerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: ManagerWhereInput | ManagerWhereInput[]
    OR?: ManagerWhereInput[]
    NOT?: ManagerWhereInput | ManagerWhereInput[]
    name?: StringFilter<"Manager"> | string
    password?: StringFilter<"Manager"> | string
  }, "id" | "username" | "email">

  export type ManagerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: ManagerCountOrderByAggregateInput
    _max?: ManagerMaxOrderByAggregateInput
    _min?: ManagerMinOrderByAggregateInput
  }

  export type ManagerScalarWhereWithAggregatesInput = {
    AND?: ManagerScalarWhereWithAggregatesInput | ManagerScalarWhereWithAggregatesInput[]
    OR?: ManagerScalarWhereWithAggregatesInput[]
    NOT?: ManagerScalarWhereWithAggregatesInput | ManagerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Manager"> | string
    name?: StringWithAggregatesFilter<"Manager"> | string
    username?: StringWithAggregatesFilter<"Manager"> | string
    email?: StringWithAggregatesFilter<"Manager"> | string
    password?: StringWithAggregatesFilter<"Manager"> | string
  }

  export type CollaboratorWhereInput = {
    AND?: CollaboratorWhereInput | CollaboratorWhereInput[]
    OR?: CollaboratorWhereInput[]
    NOT?: CollaboratorWhereInput | CollaboratorWhereInput[]
    id?: StringFilter<"Collaborator"> | string
    name?: StringFilter<"Collaborator"> | string
    seniority?: StringFilter<"Collaborator"> | string
    schedule?: StringFilter<"Collaborator"> | string
    dayOffs?: DayOffListRelationFilter
    lastDayOfLastMonth?: LastDayOfLastMonthListRelationFilter
  }

  export type CollaboratorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    seniority?: SortOrder
    schedule?: SortOrder
    dayOffs?: DayOffOrderByRelationAggregateInput
    lastDayOfLastMonth?: LastDayOfLastMonthOrderByRelationAggregateInput
  }

  export type CollaboratorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CollaboratorWhereInput | CollaboratorWhereInput[]
    OR?: CollaboratorWhereInput[]
    NOT?: CollaboratorWhereInput | CollaboratorWhereInput[]
    seniority?: StringFilter<"Collaborator"> | string
    schedule?: StringFilter<"Collaborator"> | string
    dayOffs?: DayOffListRelationFilter
    lastDayOfLastMonth?: LastDayOfLastMonthListRelationFilter
  }, "id" | "name">

  export type CollaboratorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    seniority?: SortOrder
    schedule?: SortOrder
    _count?: CollaboratorCountOrderByAggregateInput
    _max?: CollaboratorMaxOrderByAggregateInput
    _min?: CollaboratorMinOrderByAggregateInput
  }

  export type CollaboratorScalarWhereWithAggregatesInput = {
    AND?: CollaboratorScalarWhereWithAggregatesInput | CollaboratorScalarWhereWithAggregatesInput[]
    OR?: CollaboratorScalarWhereWithAggregatesInput[]
    NOT?: CollaboratorScalarWhereWithAggregatesInput | CollaboratorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Collaborator"> | string
    name?: StringWithAggregatesFilter<"Collaborator"> | string
    seniority?: StringWithAggregatesFilter<"Collaborator"> | string
    schedule?: StringWithAggregatesFilter<"Collaborator"> | string
  }

  export type DayOffWhereInput = {
    AND?: DayOffWhereInput | DayOffWhereInput[]
    OR?: DayOffWhereInput[]
    NOT?: DayOffWhereInput | DayOffWhereInput[]
    id?: StringFilter<"DayOff"> | string
    date?: DateTimeFilter<"DayOff"> | Date | string
    collaboratorId?: StringFilter<"DayOff"> | string
    Collaborator?: XOR<CollaboratorRelationFilter, CollaboratorWhereInput>
  }

  export type DayOffOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    collaboratorId?: SortOrder
    Collaborator?: CollaboratorOrderByWithRelationInput
  }

  export type DayOffWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DayOffWhereInput | DayOffWhereInput[]
    OR?: DayOffWhereInput[]
    NOT?: DayOffWhereInput | DayOffWhereInput[]
    date?: DateTimeFilter<"DayOff"> | Date | string
    collaboratorId?: StringFilter<"DayOff"> | string
    Collaborator?: XOR<CollaboratorRelationFilter, CollaboratorWhereInput>
  }, "id">

  export type DayOffOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    collaboratorId?: SortOrder
    _count?: DayOffCountOrderByAggregateInput
    _max?: DayOffMaxOrderByAggregateInput
    _min?: DayOffMinOrderByAggregateInput
  }

  export type DayOffScalarWhereWithAggregatesInput = {
    AND?: DayOffScalarWhereWithAggregatesInput | DayOffScalarWhereWithAggregatesInput[]
    OR?: DayOffScalarWhereWithAggregatesInput[]
    NOT?: DayOffScalarWhereWithAggregatesInput | DayOffScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DayOff"> | string
    date?: DateTimeWithAggregatesFilter<"DayOff"> | Date | string
    collaboratorId?: StringWithAggregatesFilter<"DayOff"> | string
  }

  export type LastDayOfLastMonthWhereInput = {
    AND?: LastDayOfLastMonthWhereInput | LastDayOfLastMonthWhereInput[]
    OR?: LastDayOfLastMonthWhereInput[]
    NOT?: LastDayOfLastMonthWhereInput | LastDayOfLastMonthWhereInput[]
    id?: StringFilter<"LastDayOfLastMonth"> | string
    date?: DateTimeFilter<"LastDayOfLastMonth"> | Date | string
    CollaboratorId?: StringFilter<"LastDayOfLastMonth"> | string
    QtdDayOff?: IntFilter<"LastDayOfLastMonth"> | number
    WeekDay?: StringFilter<"LastDayOfLastMonth"> | string
    Collaborator?: XOR<CollaboratorRelationFilter, CollaboratorWhereInput>
  }

  export type LastDayOfLastMonthOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    CollaboratorId?: SortOrder
    QtdDayOff?: SortOrder
    WeekDay?: SortOrder
    Collaborator?: CollaboratorOrderByWithRelationInput
  }

  export type LastDayOfLastMonthWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LastDayOfLastMonthWhereInput | LastDayOfLastMonthWhereInput[]
    OR?: LastDayOfLastMonthWhereInput[]
    NOT?: LastDayOfLastMonthWhereInput | LastDayOfLastMonthWhereInput[]
    date?: DateTimeFilter<"LastDayOfLastMonth"> | Date | string
    CollaboratorId?: StringFilter<"LastDayOfLastMonth"> | string
    QtdDayOff?: IntFilter<"LastDayOfLastMonth"> | number
    WeekDay?: StringFilter<"LastDayOfLastMonth"> | string
    Collaborator?: XOR<CollaboratorRelationFilter, CollaboratorWhereInput>
  }, "id">

  export type LastDayOfLastMonthOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    CollaboratorId?: SortOrder
    QtdDayOff?: SortOrder
    WeekDay?: SortOrder
    _count?: LastDayOfLastMonthCountOrderByAggregateInput
    _avg?: LastDayOfLastMonthAvgOrderByAggregateInput
    _max?: LastDayOfLastMonthMaxOrderByAggregateInput
    _min?: LastDayOfLastMonthMinOrderByAggregateInput
    _sum?: LastDayOfLastMonthSumOrderByAggregateInput
  }

  export type LastDayOfLastMonthScalarWhereWithAggregatesInput = {
    AND?: LastDayOfLastMonthScalarWhereWithAggregatesInput | LastDayOfLastMonthScalarWhereWithAggregatesInput[]
    OR?: LastDayOfLastMonthScalarWhereWithAggregatesInput[]
    NOT?: LastDayOfLastMonthScalarWhereWithAggregatesInput | LastDayOfLastMonthScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LastDayOfLastMonth"> | string
    date?: DateTimeWithAggregatesFilter<"LastDayOfLastMonth"> | Date | string
    CollaboratorId?: StringWithAggregatesFilter<"LastDayOfLastMonth"> | string
    QtdDayOff?: IntWithAggregatesFilter<"LastDayOfLastMonth"> | number
    WeekDay?: StringWithAggregatesFilter<"LastDayOfLastMonth"> | string
  }

  export type ManagerCreateInput = {
    id?: string
    name: string
    username: string
    email: string
    password: string
  }

  export type ManagerUncheckedCreateInput = {
    id?: string
    name: string
    username: string
    email: string
    password: string
  }

  export type ManagerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ManagerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ManagerCreateManyInput = {
    id?: string
    name: string
    username: string
    email: string
    password: string
  }

  export type ManagerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ManagerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CollaboratorCreateInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    dayOffs?: DayOffCreateNestedManyWithoutCollaboratorInput
    lastDayOfLastMonth?: LastDayOfLastMonthCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorUncheckedCreateInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    dayOffs?: DayOffUncheckedCreateNestedManyWithoutCollaboratorInput
    lastDayOfLastMonth?: LastDayOfLastMonthUncheckedCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    dayOffs?: DayOffUpdateManyWithoutCollaboratorNestedInput
    lastDayOfLastMonth?: LastDayOfLastMonthUpdateManyWithoutCollaboratorNestedInput
  }

  export type CollaboratorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    dayOffs?: DayOffUncheckedUpdateManyWithoutCollaboratorNestedInput
    lastDayOfLastMonth?: LastDayOfLastMonthUncheckedUpdateManyWithoutCollaboratorNestedInput
  }

  export type CollaboratorCreateManyInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
  }

  export type CollaboratorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
  }

  export type CollaboratorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
  }

  export type DayOffCreateInput = {
    id?: string
    date: Date | string
    Collaborator: CollaboratorCreateNestedOneWithoutDayOffsInput
  }

  export type DayOffUncheckedCreateInput = {
    id?: string
    date: Date | string
    collaboratorId: string
  }

  export type DayOffUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Collaborator?: CollaboratorUpdateOneRequiredWithoutDayOffsNestedInput
  }

  export type DayOffUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    collaboratorId?: StringFieldUpdateOperationsInput | string
  }

  export type DayOffCreateManyInput = {
    id?: string
    date: Date | string
    collaboratorId: string
  }

  export type DayOffUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayOffUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    collaboratorId?: StringFieldUpdateOperationsInput | string
  }

  export type LastDayOfLastMonthCreateInput = {
    id?: string
    date: Date | string
    QtdDayOff: number
    WeekDay: string
    Collaborator: CollaboratorCreateNestedOneWithoutLastDayOfLastMonthInput
  }

  export type LastDayOfLastMonthUncheckedCreateInput = {
    id?: string
    date: Date | string
    CollaboratorId: string
    QtdDayOff: number
    WeekDay: string
  }

  export type LastDayOfLastMonthUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
    Collaborator?: CollaboratorUpdateOneRequiredWithoutLastDayOfLastMonthNestedInput
  }

  export type LastDayOfLastMonthUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    CollaboratorId?: StringFieldUpdateOperationsInput | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }

  export type LastDayOfLastMonthCreateManyInput = {
    id?: string
    date: Date | string
    CollaboratorId: string
    QtdDayOff: number
    WeekDay: string
  }

  export type LastDayOfLastMonthUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }

  export type LastDayOfLastMonthUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    CollaboratorId?: StringFieldUpdateOperationsInput | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ManagerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ManagerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ManagerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DayOffListRelationFilter = {
    every?: DayOffWhereInput
    some?: DayOffWhereInput
    none?: DayOffWhereInput
  }

  export type LastDayOfLastMonthListRelationFilter = {
    every?: LastDayOfLastMonthWhereInput
    some?: LastDayOfLastMonthWhereInput
    none?: LastDayOfLastMonthWhereInput
  }

  export type DayOffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LastDayOfLastMonthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollaboratorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    seniority?: SortOrder
    schedule?: SortOrder
  }

  export type CollaboratorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    seniority?: SortOrder
    schedule?: SortOrder
  }

  export type CollaboratorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    seniority?: SortOrder
    schedule?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CollaboratorRelationFilter = {
    is?: CollaboratorWhereInput
    isNot?: CollaboratorWhereInput
  }

  export type DayOffCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    collaboratorId?: SortOrder
  }

  export type DayOffMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    collaboratorId?: SortOrder
  }

  export type DayOffMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    collaboratorId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type LastDayOfLastMonthCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    CollaboratorId?: SortOrder
    QtdDayOff?: SortOrder
    WeekDay?: SortOrder
  }

  export type LastDayOfLastMonthAvgOrderByAggregateInput = {
    QtdDayOff?: SortOrder
  }

  export type LastDayOfLastMonthMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    CollaboratorId?: SortOrder
    QtdDayOff?: SortOrder
    WeekDay?: SortOrder
  }

  export type LastDayOfLastMonthMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    CollaboratorId?: SortOrder
    QtdDayOff?: SortOrder
    WeekDay?: SortOrder
  }

  export type LastDayOfLastMonthSumOrderByAggregateInput = {
    QtdDayOff?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DayOffCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput> | DayOffCreateWithoutCollaboratorInput[] | DayOffUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: DayOffCreateOrConnectWithoutCollaboratorInput | DayOffCreateOrConnectWithoutCollaboratorInput[]
    createMany?: DayOffCreateManyCollaboratorInputEnvelope
    connect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
  }

  export type LastDayOfLastMonthCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput> | LastDayOfLastMonthCreateWithoutCollaboratorInput[] | LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput | LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput[]
    createMany?: LastDayOfLastMonthCreateManyCollaboratorInputEnvelope
    connect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
  }

  export type DayOffUncheckedCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput> | DayOffCreateWithoutCollaboratorInput[] | DayOffUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: DayOffCreateOrConnectWithoutCollaboratorInput | DayOffCreateOrConnectWithoutCollaboratorInput[]
    createMany?: DayOffCreateManyCollaboratorInputEnvelope
    connect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
  }

  export type LastDayOfLastMonthUncheckedCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput> | LastDayOfLastMonthCreateWithoutCollaboratorInput[] | LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput | LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput[]
    createMany?: LastDayOfLastMonthCreateManyCollaboratorInputEnvelope
    connect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
  }

  export type DayOffUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput> | DayOffCreateWithoutCollaboratorInput[] | DayOffUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: DayOffCreateOrConnectWithoutCollaboratorInput | DayOffCreateOrConnectWithoutCollaboratorInput[]
    upsert?: DayOffUpsertWithWhereUniqueWithoutCollaboratorInput | DayOffUpsertWithWhereUniqueWithoutCollaboratorInput[]
    createMany?: DayOffCreateManyCollaboratorInputEnvelope
    set?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    disconnect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    delete?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    connect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    update?: DayOffUpdateWithWhereUniqueWithoutCollaboratorInput | DayOffUpdateWithWhereUniqueWithoutCollaboratorInput[]
    updateMany?: DayOffUpdateManyWithWhereWithoutCollaboratorInput | DayOffUpdateManyWithWhereWithoutCollaboratorInput[]
    deleteMany?: DayOffScalarWhereInput | DayOffScalarWhereInput[]
  }

  export type LastDayOfLastMonthUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput> | LastDayOfLastMonthCreateWithoutCollaboratorInput[] | LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput | LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput[]
    upsert?: LastDayOfLastMonthUpsertWithWhereUniqueWithoutCollaboratorInput | LastDayOfLastMonthUpsertWithWhereUniqueWithoutCollaboratorInput[]
    createMany?: LastDayOfLastMonthCreateManyCollaboratorInputEnvelope
    set?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    disconnect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    delete?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    connect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    update?: LastDayOfLastMonthUpdateWithWhereUniqueWithoutCollaboratorInput | LastDayOfLastMonthUpdateWithWhereUniqueWithoutCollaboratorInput[]
    updateMany?: LastDayOfLastMonthUpdateManyWithWhereWithoutCollaboratorInput | LastDayOfLastMonthUpdateManyWithWhereWithoutCollaboratorInput[]
    deleteMany?: LastDayOfLastMonthScalarWhereInput | LastDayOfLastMonthScalarWhereInput[]
  }

  export type DayOffUncheckedUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput> | DayOffCreateWithoutCollaboratorInput[] | DayOffUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: DayOffCreateOrConnectWithoutCollaboratorInput | DayOffCreateOrConnectWithoutCollaboratorInput[]
    upsert?: DayOffUpsertWithWhereUniqueWithoutCollaboratorInput | DayOffUpsertWithWhereUniqueWithoutCollaboratorInput[]
    createMany?: DayOffCreateManyCollaboratorInputEnvelope
    set?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    disconnect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    delete?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    connect?: DayOffWhereUniqueInput | DayOffWhereUniqueInput[]
    update?: DayOffUpdateWithWhereUniqueWithoutCollaboratorInput | DayOffUpdateWithWhereUniqueWithoutCollaboratorInput[]
    updateMany?: DayOffUpdateManyWithWhereWithoutCollaboratorInput | DayOffUpdateManyWithWhereWithoutCollaboratorInput[]
    deleteMany?: DayOffScalarWhereInput | DayOffScalarWhereInput[]
  }

  export type LastDayOfLastMonthUncheckedUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput> | LastDayOfLastMonthCreateWithoutCollaboratorInput[] | LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput[]
    connectOrCreate?: LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput | LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput[]
    upsert?: LastDayOfLastMonthUpsertWithWhereUniqueWithoutCollaboratorInput | LastDayOfLastMonthUpsertWithWhereUniqueWithoutCollaboratorInput[]
    createMany?: LastDayOfLastMonthCreateManyCollaboratorInputEnvelope
    set?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    disconnect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    delete?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    connect?: LastDayOfLastMonthWhereUniqueInput | LastDayOfLastMonthWhereUniqueInput[]
    update?: LastDayOfLastMonthUpdateWithWhereUniqueWithoutCollaboratorInput | LastDayOfLastMonthUpdateWithWhereUniqueWithoutCollaboratorInput[]
    updateMany?: LastDayOfLastMonthUpdateManyWithWhereWithoutCollaboratorInput | LastDayOfLastMonthUpdateManyWithWhereWithoutCollaboratorInput[]
    deleteMany?: LastDayOfLastMonthScalarWhereInput | LastDayOfLastMonthScalarWhereInput[]
  }

  export type CollaboratorCreateNestedOneWithoutDayOffsInput = {
    create?: XOR<CollaboratorCreateWithoutDayOffsInput, CollaboratorUncheckedCreateWithoutDayOffsInput>
    connectOrCreate?: CollaboratorCreateOrConnectWithoutDayOffsInput
    connect?: CollaboratorWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CollaboratorUpdateOneRequiredWithoutDayOffsNestedInput = {
    create?: XOR<CollaboratorCreateWithoutDayOffsInput, CollaboratorUncheckedCreateWithoutDayOffsInput>
    connectOrCreate?: CollaboratorCreateOrConnectWithoutDayOffsInput
    upsert?: CollaboratorUpsertWithoutDayOffsInput
    connect?: CollaboratorWhereUniqueInput
    update?: XOR<XOR<CollaboratorUpdateToOneWithWhereWithoutDayOffsInput, CollaboratorUpdateWithoutDayOffsInput>, CollaboratorUncheckedUpdateWithoutDayOffsInput>
  }

  export type CollaboratorCreateNestedOneWithoutLastDayOfLastMonthInput = {
    create?: XOR<CollaboratorCreateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedCreateWithoutLastDayOfLastMonthInput>
    connectOrCreate?: CollaboratorCreateOrConnectWithoutLastDayOfLastMonthInput
    connect?: CollaboratorWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CollaboratorUpdateOneRequiredWithoutLastDayOfLastMonthNestedInput = {
    create?: XOR<CollaboratorCreateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedCreateWithoutLastDayOfLastMonthInput>
    connectOrCreate?: CollaboratorCreateOrConnectWithoutLastDayOfLastMonthInput
    upsert?: CollaboratorUpsertWithoutLastDayOfLastMonthInput
    connect?: CollaboratorWhereUniqueInput
    update?: XOR<XOR<CollaboratorUpdateToOneWithWhereWithoutLastDayOfLastMonthInput, CollaboratorUpdateWithoutLastDayOfLastMonthInput>, CollaboratorUncheckedUpdateWithoutLastDayOfLastMonthInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DayOffCreateWithoutCollaboratorInput = {
    id?: string
    date: Date | string
  }

  export type DayOffUncheckedCreateWithoutCollaboratorInput = {
    id?: string
    date: Date | string
  }

  export type DayOffCreateOrConnectWithoutCollaboratorInput = {
    where: DayOffWhereUniqueInput
    create: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput>
  }

  export type DayOffCreateManyCollaboratorInputEnvelope = {
    data: DayOffCreateManyCollaboratorInput | DayOffCreateManyCollaboratorInput[]
  }

  export type LastDayOfLastMonthCreateWithoutCollaboratorInput = {
    id?: string
    date: Date | string
    QtdDayOff: number
    WeekDay: string
  }

  export type LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput = {
    id?: string
    date: Date | string
    QtdDayOff: number
    WeekDay: string
  }

  export type LastDayOfLastMonthCreateOrConnectWithoutCollaboratorInput = {
    where: LastDayOfLastMonthWhereUniqueInput
    create: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput>
  }

  export type LastDayOfLastMonthCreateManyCollaboratorInputEnvelope = {
    data: LastDayOfLastMonthCreateManyCollaboratorInput | LastDayOfLastMonthCreateManyCollaboratorInput[]
  }

  export type DayOffUpsertWithWhereUniqueWithoutCollaboratorInput = {
    where: DayOffWhereUniqueInput
    update: XOR<DayOffUpdateWithoutCollaboratorInput, DayOffUncheckedUpdateWithoutCollaboratorInput>
    create: XOR<DayOffCreateWithoutCollaboratorInput, DayOffUncheckedCreateWithoutCollaboratorInput>
  }

  export type DayOffUpdateWithWhereUniqueWithoutCollaboratorInput = {
    where: DayOffWhereUniqueInput
    data: XOR<DayOffUpdateWithoutCollaboratorInput, DayOffUncheckedUpdateWithoutCollaboratorInput>
  }

  export type DayOffUpdateManyWithWhereWithoutCollaboratorInput = {
    where: DayOffScalarWhereInput
    data: XOR<DayOffUpdateManyMutationInput, DayOffUncheckedUpdateManyWithoutCollaboratorInput>
  }

  export type DayOffScalarWhereInput = {
    AND?: DayOffScalarWhereInput | DayOffScalarWhereInput[]
    OR?: DayOffScalarWhereInput[]
    NOT?: DayOffScalarWhereInput | DayOffScalarWhereInput[]
    id?: StringFilter<"DayOff"> | string
    date?: DateTimeFilter<"DayOff"> | Date | string
    collaboratorId?: StringFilter<"DayOff"> | string
  }

  export type LastDayOfLastMonthUpsertWithWhereUniqueWithoutCollaboratorInput = {
    where: LastDayOfLastMonthWhereUniqueInput
    update: XOR<LastDayOfLastMonthUpdateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedUpdateWithoutCollaboratorInput>
    create: XOR<LastDayOfLastMonthCreateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedCreateWithoutCollaboratorInput>
  }

  export type LastDayOfLastMonthUpdateWithWhereUniqueWithoutCollaboratorInput = {
    where: LastDayOfLastMonthWhereUniqueInput
    data: XOR<LastDayOfLastMonthUpdateWithoutCollaboratorInput, LastDayOfLastMonthUncheckedUpdateWithoutCollaboratorInput>
  }

  export type LastDayOfLastMonthUpdateManyWithWhereWithoutCollaboratorInput = {
    where: LastDayOfLastMonthScalarWhereInput
    data: XOR<LastDayOfLastMonthUpdateManyMutationInput, LastDayOfLastMonthUncheckedUpdateManyWithoutCollaboratorInput>
  }

  export type LastDayOfLastMonthScalarWhereInput = {
    AND?: LastDayOfLastMonthScalarWhereInput | LastDayOfLastMonthScalarWhereInput[]
    OR?: LastDayOfLastMonthScalarWhereInput[]
    NOT?: LastDayOfLastMonthScalarWhereInput | LastDayOfLastMonthScalarWhereInput[]
    id?: StringFilter<"LastDayOfLastMonth"> | string
    date?: DateTimeFilter<"LastDayOfLastMonth"> | Date | string
    CollaboratorId?: StringFilter<"LastDayOfLastMonth"> | string
    QtdDayOff?: IntFilter<"LastDayOfLastMonth"> | number
    WeekDay?: StringFilter<"LastDayOfLastMonth"> | string
  }

  export type CollaboratorCreateWithoutDayOffsInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    lastDayOfLastMonth?: LastDayOfLastMonthCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorUncheckedCreateWithoutDayOffsInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    lastDayOfLastMonth?: LastDayOfLastMonthUncheckedCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorCreateOrConnectWithoutDayOffsInput = {
    where: CollaboratorWhereUniqueInput
    create: XOR<CollaboratorCreateWithoutDayOffsInput, CollaboratorUncheckedCreateWithoutDayOffsInput>
  }

  export type CollaboratorUpsertWithoutDayOffsInput = {
    update: XOR<CollaboratorUpdateWithoutDayOffsInput, CollaboratorUncheckedUpdateWithoutDayOffsInput>
    create: XOR<CollaboratorCreateWithoutDayOffsInput, CollaboratorUncheckedCreateWithoutDayOffsInput>
    where?: CollaboratorWhereInput
  }

  export type CollaboratorUpdateToOneWithWhereWithoutDayOffsInput = {
    where?: CollaboratorWhereInput
    data: XOR<CollaboratorUpdateWithoutDayOffsInput, CollaboratorUncheckedUpdateWithoutDayOffsInput>
  }

  export type CollaboratorUpdateWithoutDayOffsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    lastDayOfLastMonth?: LastDayOfLastMonthUpdateManyWithoutCollaboratorNestedInput
  }

  export type CollaboratorUncheckedUpdateWithoutDayOffsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    lastDayOfLastMonth?: LastDayOfLastMonthUncheckedUpdateManyWithoutCollaboratorNestedInput
  }

  export type CollaboratorCreateWithoutLastDayOfLastMonthInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    dayOffs?: DayOffCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorUncheckedCreateWithoutLastDayOfLastMonthInput = {
    id?: string
    name: string
    seniority: string
    schedule: string
    dayOffs?: DayOffUncheckedCreateNestedManyWithoutCollaboratorInput
  }

  export type CollaboratorCreateOrConnectWithoutLastDayOfLastMonthInput = {
    where: CollaboratorWhereUniqueInput
    create: XOR<CollaboratorCreateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedCreateWithoutLastDayOfLastMonthInput>
  }

  export type CollaboratorUpsertWithoutLastDayOfLastMonthInput = {
    update: XOR<CollaboratorUpdateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedUpdateWithoutLastDayOfLastMonthInput>
    create: XOR<CollaboratorCreateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedCreateWithoutLastDayOfLastMonthInput>
    where?: CollaboratorWhereInput
  }

  export type CollaboratorUpdateToOneWithWhereWithoutLastDayOfLastMonthInput = {
    where?: CollaboratorWhereInput
    data: XOR<CollaboratorUpdateWithoutLastDayOfLastMonthInput, CollaboratorUncheckedUpdateWithoutLastDayOfLastMonthInput>
  }

  export type CollaboratorUpdateWithoutLastDayOfLastMonthInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    dayOffs?: DayOffUpdateManyWithoutCollaboratorNestedInput
  }

  export type CollaboratorUncheckedUpdateWithoutLastDayOfLastMonthInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    seniority?: StringFieldUpdateOperationsInput | string
    schedule?: StringFieldUpdateOperationsInput | string
    dayOffs?: DayOffUncheckedUpdateManyWithoutCollaboratorNestedInput
  }

  export type DayOffCreateManyCollaboratorInput = {
    id?: string
    date: Date | string
  }

  export type LastDayOfLastMonthCreateManyCollaboratorInput = {
    id?: string
    date: Date | string
    QtdDayOff: number
    WeekDay: string
  }

  export type DayOffUpdateWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayOffUncheckedUpdateWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DayOffUncheckedUpdateManyWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LastDayOfLastMonthUpdateWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }

  export type LastDayOfLastMonthUncheckedUpdateWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }

  export type LastDayOfLastMonthUncheckedUpdateManyWithoutCollaboratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    QtdDayOff?: IntFieldUpdateOperationsInput | number
    WeekDay?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CollaboratorCountOutputTypeDefaultArgs instead
     */
    export type CollaboratorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaboratorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManagerDefaultArgs instead
     */
    export type ManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManagerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaboratorDefaultArgs instead
     */
    export type CollaboratorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaboratorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DayOffDefaultArgs instead
     */
    export type DayOffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DayOffDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LastDayOfLastMonthDefaultArgs instead
     */
    export type LastDayOfLastMonthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LastDayOfLastMonthDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}